#!/bin/sh
# configure script for tmux monitor
# Checks for required dependencies, exits 1 if any are missing

# Exit on error
set -e

# Color codes (POSIX sh compatible)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'

# Error counter
ERRORS=0

# Program name
PROGRAM="tmux monitor"

# Helper functions
check_command() {
    cmd="$1"
    desc="$2"
    critical="${3:-yes}"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        printf "${GREEN}✓${RESET} Found %s (%s)\n" "$cmd" "$desc"
        return 0
    else
        if [ "$critical" = "yes" ]; then
            printf "${RED}✗${RESET} Missing %s (%s)\n" "$cmd" "$desc"
            ERRORS=$((ERRORS + 1))
        else
            printf "${YELLOW}!${RESET} Optional %s (%s)\n" "$cmd" "$desc"
        fi
        return 1
    fi
}

check_bash_feature() {
    feature="$1"
    test_code="$2"
    desc="$3"
    
    if bash -c "$test_code" >/dev/null 2>&1; then
        printf "${GREEN}✓${RESET} Bash supports %s\n" "$desc"
        return 0
    else
        printf "${RED}✗${RESET} Bash missing %s\n" "$desc"
        ERRORS=$((ERRORS + 1))
        return 1
    fi
}

printf "\nChecking dependencies for %s...\n\n" "$PROGRAM"

# Check for critical dependencies
printf "Core dependencies:\n"
check_command bash "Bash shell"
check_command tmux "Terminal multiplexer"
check_command asciinema "Terminal session recorder"

printf "\nSystem utilities:\n"
check_command mkfifo "Named pipe creator"
check_command pgrep "Process grep"
check_command pkill "Process kill"
check_command fuser "File/socket user finder"
check_command script "Terminal session recorder wrapper"
check_command stty "Terminal control"
check_command tput "Terminal capability interface"
check_command stdbuf "Buffer control"

printf "\nStandard utilities:\n"
check_command find "File finder"
check_command date "Date utility"
check_command du "Disk usage"
check_command cut "Text cutter"
check_command head "File head printer"
check_command tail "File tail utility"
check_command sed "Stream editor"
check_command grep "Pattern matcher"
check_command cat "File concatenator"
check_command printf "Formatted printer"
check_command mkdir "Directory creator"
check_command rm "File remover"
check_command sleep "Process sleeper"

# Check for Bash-specific features we use
if command -v bash >/dev/null 2>&1; then
    printf "\nBash features:\n"
    check_bash_feature "arrays" 'declare -a test_array' "arrays"
    check_bash_feature "process substitution" 'cat <(echo test)' "process substitution <()"
    check_bash_feature "BASH_SOURCE" 'echo ${BASH_SOURCE[0]}' "BASH_SOURCE variable"
    check_bash_feature "local variables" 'f() { local x=1; }; f' "local variables"
else
    printf "${RED}✗${RESET} Bash not found - cannot check features\n"
    ERRORS=$((ERRORS + 1))
fi

# Check tmux version
if command -v tmux >/dev/null 2>&1; then
    printf "\nVersion checks:\n"
    TMUX_VERSION=$(tmux -V | sed 's/tmux \([0-9.]\+\).*/\1/')
    printf "tmux version: %s" "$TMUX_VERSION"
    
    # Check if version is at least 2.0 (when hooks were introduced)
    MAJOR=$(echo "$TMUX_VERSION" | cut -d. -f1)
    
    if [ "$MAJOR" -lt 2 ]; then
        printf " ${RED}(need 2.0+ for hooks)${RESET}\n"
        ERRORS=$((ERRORS + 1))
    else
        printf " ${GREEN}✓${RESET}\n"
    fi
fi

# Summary
printf "\n=== Summary ===\n"
if [ $ERRORS -eq 0 ]; then
    printf "${GREEN}All dependencies satisfied!${RESET}\n"
    exit 0
else
    printf "${RED}Missing %d required dependencies${RESET}\n" "$ERRORS"
    printf "\nPlease install the missing dependencies and run ./configure again\n"
    exit 1
fi